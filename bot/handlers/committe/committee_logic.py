from aiogram import Router, types, F
from datetime import datetime

from bot.utils.config import COMMITTEE_CHAT_ID

from bot.db.committee_queries import (
    update_request_status,
    log_action,
    get_user_role,
    finalize_request,
    is_ready_for_closure, is_user_admin
)

router = Router()

@router.callback_query(F.data.startswith(("accept:", "approve:", "decline:", "close:")))
async def callback_handler(callback: types.CallbackQuery):
    action, ins_id = callback.data.split(":")
    print(f"‚û°Ô∏è –î–µ–π—Å—Ç–≤–∏–µ: {action}, –∑–∞—è–≤–∫–∞: {ins_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.id}")
    ins_id = int(ins_id)
    user = callback.from_user

    print(f"üîî –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞: {callback.data}")

    role = get_user_role(user.id)  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ Telegram ID
    print(f"‚û°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞: action={action}, role={role}, is_admin={is_user_admin(user.id)}")

    if action == "accept" and (role == 3 or is_user_admin(user.id)):
        update_request_status(ins_id, user.id, status=1)
        print("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω")
        log_action(user.id, "accept", ins_id, user.full_name, "–ü—Ä–∏–Ω—è—Ç–æ —Å–µ–∫—Ä–µ—Ç–∞—Ä—ë–º")
        await callback.message.edit_reply_markup(reply_markup=None)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ä–∞–∑—É
        from bot.db.committee_queries import get_users_pending_vote
        participants = get_users_pending_vote(ins_id)
        followup_text = (
            f"üìå –ó–∞—è–≤–∫–∞ | üÜî: {ins_id} –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∫–æ–º–∏—Ç–µ—Ç–æ–º.\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É:\n"
        )
        for participant in participants:
            mention = f"@{participant['USERNAME']}" if participant['USERNAME'] else participant['FULL_NAME']
            followup_text += f"‚ñ´Ô∏è {mention}\n"

        await callback.message.bot.send_message(chat_id=COMMITTEE_CHAT_ID, text=followup_text)
        await callback.message.answer(f"üì• {user.full_name} –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É {ins_id}")


    elif action == "approve" and (role == 2 or is_user_admin(user.id)):
        update_request_status(ins_id, user.id, status=1)
        log_action(user.id, "approve", ins_id, user.full_name, "–û–¥–æ–±—Ä–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º")

        vote_log = (
            f"üìä –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ:\n"
            f"üë§ {user.full_name} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª: ‚úÖ –û–¥–æ–±—Ä–∏—Ç—å\n"
            f"üïí {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        await callback.message.answer(vote_log)

    elif action == "decline" and (role == 2 or is_user_admin(user.id)):
        update_request_status(ins_id, user.id, status=1)
        log_action(user.id, "decline", ins_id, user.full_name, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º")

        vote_log = (
            f"üìä –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ:\n"
            f"üë§ {user.full_name} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª: ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å\n"
            f"üïí {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        await callback.message.answer(vote_log)

    elif action == "close" and role == 2:
        if is_ready_for_closure(ins_id):
            final = finalize_request(ins_id)
            result = "–æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ" if final == 2 else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå"
            log_action(user.id, "close", ins_id, user.full_name, f"–ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–∫–∏ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª–µ–º: {result}")
            await callback.message.answer(f"üîí –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å {user.full_name} –∑–∞–∫—Ä—ã–ª –∑–∞—è–≤–∫—É {ins_id} ‚Äî {result}")
        else:
            await callback.message.answer("‚è≥ –ï—â—ë –Ω–µ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏.")

    else:
        await callback.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.")

    await callback.answer()

# üîç –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ—Ç–ª–∞–¥—á–∏–∫ –≤—Å–µ—Ö callback'–æ–≤
@router.callback_query()
async def debug_all_callbacks(callback: types.CallbackQuery):
    print(f"üëÄ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {callback.data} –æ—Ç {callback.from_user.id}")
    await callback.answer("‚úÖ Callback —Ä–∞–±–æ—Ç–∞–µ—Ç!")